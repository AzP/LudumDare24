!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUILDINGHIT	include/constants.h	/^	BUILDINGHIT = -1,$/;"	e	enum:SHOTCOLLISION
CDevice	device.cpp	/^CDevice::CDevice(MyEventReceiver& receiver)$/;"	f	class:CDevice
CDevice	include/device.h	/^class CDevice$/;"	c
CLevel	include/level.h	/^class CLevel$/;"	c
CLevel	level.cpp	/^CLevel::CLevel(IVideoDriver* driver, ISceneManager* smgr) : m_smgr(smgr)$/;"	f	class:CLevel
CONSTANTS_H	include/constants.h	4;"	d
CPlayer	include/player.h	/^class CPlayer {$/;"	c
CPlayer	player.cpp	/^CPlayer::CPlayer(vector3df position, CDevice& device, scene::ITriangleSelector* selector)$/;"	f	class:CPlayer
CProjectile	include/projectile.h	/^class CProjectile$/;"	c
CProjectile	projectile.cpp	/^CProjectile::CProjectile(CDevice& device, vector3df pos, vector3df dir, ITriangleSelector* selector)$/;"	f	class:CProjectile
CWeapon	include/weapon.h	/^class CWeapon$/;"	c
CWeapon	weapon.cpp	/^CWeapon::CWeapon(CDevice& device, ITriangleSelector* selector)$/;"	f	class:CWeapon
DEATH	include/constants.h	/^	DEATH,$/;"	e	enum:PACKETTYPE
DEVICE_H	include/device.h	2;"	d
EVENTRECEIVER_H	include/eventreceiver.h	2;"	d
GAMEPORT	include/constants.h	/^static const int GAMEPORT = 8200; \/\/Translated to 2080 in Big Endian$/;"	v
HANDSHAKE	include/constants.h	/^	HANDSHAKE, $/;"	e	enum:PACKETTYPE
LEVEL_H	include/level.h	2;"	d
MyEventReceiver	include/eventreceiver.h	/^	MyEventReceiver()$/;"	f	class:MyEventReceiver
MyEventReceiver	include/eventreceiver.h	/^class MyEventReceiver : public IEventReceiver$/;"	c
NOHIT	include/constants.h	/^	NOHIT = -2,$/;"	e	enum:SHOTCOLLISION
NOTHING	include/constants.h	/^	NOTHING = -1,$/;"	e	enum:PACKETTYPE
OnEvent	include/eventreceiver.h	/^	virtual bool OnEvent(const SEvent& event) $/;"	f	class:MyEventReceiver
PACKETTYPE	include/constants.h	/^enum PACKETTYPE {$/;"	g
PLAYER	include/constants.h	/^	PLAYER,$/;"	e	enum:PACKETTYPE
PLAYERHIT	include/constants.h	/^	PLAYERHIT$/;"	e	enum:SHOTCOLLISION
PLAYER_H	include/player.h	2;"	d
PROJECTILE_H	include/projectile.h	2;"	d
QUIT	include/constants.h	/^	QUIT$/;"	e	enum:PACKETTYPE
REQUEST	include/constants.h	/^	REQUEST, $/;"	e	enum:PACKETTYPE
SHIP	include/constants.h	/^	SHIP,$/;"	e	enum:PACKETTYPE
SHOT	include/constants.h	/^	SHOT,$/;"	e	enum:PACKETTYPE
SHOTCOLLISION	include/constants.h	/^enum SHOTCOLLISION {$/;"	g
SPEED	include/player.h	/^	static constexpr float SPEED = 300.0f;$/;"	m	class:CPlayer
WEAPON_H	include/weapon.h	2;"	d
_SND_TYPE_EXPL	include/constants.h	/^static const int _SND_TYPE_EXPL = 1;$/;"	v
_SND_TYPE_SHOT	include/constants.h	/^static const int _SND_TYPE_SHOT = 0;$/;"	v
_SND_TYPE_TURB	include/constants.h	/^static const int _SND_TYPE_TURB = 2;$/;"	v
addCollisionDetection	level.cpp	/^void CLevel::addCollisionDetection(ISceneNode* node)$/;"	f	class:CLevel
getCameraLookAtNode	include/device.h	/^	ISceneNode* getCameraLookAtNode() const { return m_cameraLookAtNode; }$/;"	f	class:CDevice
getCameraNode	include/device.h	/^	ICameraSceneNode* getCameraNode() const { return m_cameraNode; }$/;"	f	class:CDevice
getCannonTexture	include/player.h	/^	ITexture* getCannonTexture() const { return m_cannonTexture; };$/;"	f	class:CPlayer
getDevice	include/device.h	/^	IrrlichtDevice* getDevice() const { return m_device; }$/;"	f	class:CDevice
getDriver	include/device.h	/^	IVideoDriver* getDriver() const { return m_driver; } $/;"	f	class:CDevice
getEnv	include/device.h	/^	IGUIEnvironment* getEnv() const { return m_env; }$/;"	f	class:CDevice
getFPS	device.cpp	/^float CDevice::getFPS()$/;"	f	class:CDevice
getFont	include/device.h	/^	IGUIFont* getFont() const { return m_font; }$/;"	f	class:CDevice
getFrameTime	include/device.h	/^	float getFrameTime() const { return m_frametime; }$/;"	f	class:CDevice
getKeys	include/eventreceiver.h	/^	virtual const bool* getKeys() const { return mKeyIsDown; }$/;"	f	class:MyEventReceiver
getLeftMouseState	include/eventreceiver.h	/^	virtual bool getLeftMouseState() const { return m_leftmousebutton; }$/;"	f	class:MyEventReceiver
getPosX	include/player.h	/^	int getPosX() const { return mPosX; };$/;"	f	class:CPlayer
getPosY	include/player.h	/^	int getPosY() const { return mPosY; };$/;"	f	class:CPlayer
getPosition	include/player.h	/^	vector3df getPosition() const { return mNode->getPosition(); };$/;"	f	class:CPlayer
getRotation	include/player.h	/^	vector3df getRotation() const { return mNode->getRotation(); };$/;"	f	class:CPlayer
getSceneManager	include/device.h	/^	ISceneManager* getSceneManager() const { return m_sceneMgr; }$/;"	f	class:CDevice
getSceneNode	include/level.h	/^	ISceneNode* getSceneNode() const { return m_terrain; };$/;"	f	class:CLevel
getSceneNode	include/player.h	/^	scene::ISceneNode* const getSceneNode() const { return mNode; };$/;"	f	class:CPlayer::scene
getTimer	include/device.h	/^	ITimer* getTimer() const { return m_timer; }$/;"	f	class:CDevice
getTriangleSelector	include/level.h	/^	ITriangleSelector* getTriangleSelector() const { return m_towerNode->getTriangleSelector(); };$/;"	f	class:CLevel
getTriangleSelector	include/player.h	/^	scene::ITriangleSelector* getTriangleSelector() const { return mNode->getTriangleSelector(); };$/;"	f	class:CPlayer
isKeyDown	include/eventreceiver.h	/^	virtual bool isKeyDown(EKEY_CODE keyCode) const { return mKeyIsDown[keyCode]; }$/;"	f	class:MyEventReceiver
mDirection	include/player.h	/^	vector3df mDirection;$/;"	m	class:CPlayer
mKeyIsDown	include/eventreceiver.h	/^	bool mKeyIsDown[irr::KEY_KEY_CODES_COUNT];$/;"	m	class:MyEventReceiver
mNode	include/player.h	/^	scene::ISceneNode* mNode;$/;"	m	class:CPlayer
mPosX	include/player.h	/^	int mPosX, mPosY;$/;"	m	class:CPlayer
mPosY	include/player.h	/^	int mPosX, mPosY;$/;"	m	class:CPlayer
m_cameraLookAtNode	include/device.h	/^	ISceneNode *m_cameraLookAtNode;$/;"	m	class:CDevice
m_cameraNode	include/device.h	/^	ICameraSceneNode *m_cameraNode;$/;"	m	class:CDevice
m_cannonTexture	include/player.h	/^	ITexture* m_cannonTexture;$/;"	m	class:CPlayer
m_centerX	include/eventreceiver.h	/^	float m_centerX;$/;"	m	class:MyEventReceiver
m_centerY	include/eventreceiver.h	/^	float m_centerY;$/;"	m	class:MyEventReceiver
m_collisionMgr	include/projectile.h	/^	ISceneCollisionManager* m_collisionMgr;$/;"	m	class:CProjectile
m_collisionMgr	include/weapon.h	/^	ISceneCollisionManager* m_collisionMgr;$/;"	m	class:CWeapon
m_device	include/device.h	/^	IrrlichtDevice* m_device;$/;"	m	class:CDevice
m_device	include/weapon.h	/^	CDevice& m_device;$/;"	m	class:CWeapon
m_direction	include/projectile.h	/^	vector3df m_direction;$/;"	m	class:CProjectile
m_driver	include/device.h	/^	IVideoDriver* m_driver;$/;"	m	class:CDevice
m_env	include/device.h	/^	IGUIEnvironment *m_env;$/;"	m	class:CDevice
m_firedProjectiles	include/weapon.h	/^	std::vector<CProjectile*> m_firedProjectiles;$/;"	m	class:CWeapon
m_font	include/device.h	/^	IGUIFont *m_font;$/;"	m	class:CDevice
m_frametime	include/device.h	/^	float m_frametime;$/;"	m	class:CDevice
m_lasttime	include/device.h	/^	float m_lasttime;$/;"	m	class:CDevice
m_leftmousebutton	include/eventreceiver.h	/^	bool m_leftmousebutton;$/;"	m	class:MyEventReceiver
m_mouseX	include/eventreceiver.h	/^	s32 m_mouseX; $/;"	m	class:MyEventReceiver
m_mouseY	include/eventreceiver.h	/^	s32 m_mouseY; $/;"	m	class:MyEventReceiver
m_node	include/projectile.h	/^	ISceneNode* m_node;$/;"	m	class:CProjectile
m_position	include/projectile.h	/^	vector3df m_position;$/;"	m	class:CProjectile
m_sceneMgr	include/device.h	/^	ISceneManager* m_sceneMgr;$/;"	m	class:CDevice
m_smgr	include/level.h	/^	ISceneManager* m_smgr;$/;"	m	class:CLevel
m_terrain	include/level.h	/^	ITerrainSceneNode* m_terrain;$/;"	m	class:CLevel
m_terrainSelector	include/player.h	/^	ITriangleSelector* m_terrainSelector;$/;"	m	class:CPlayer
m_terrainSelector	include/weapon.h	/^	ITriangleSelector* m_terrainSelector;$/;"	m	class:CWeapon
m_timer	include/device.h	/^	ITimer *m_timer;$/;"	m	class:CDevice
m_towerNode	include/level.h	/^	IMeshSceneNode* m_towerNode;$/;"	m	class:CLevel
m_weapon	include/player.h	/^	CWeapon m_weapon;$/;"	m	class:CPlayer
m_windowX	include/eventreceiver.h	/^	int m_windowX;$/;"	m	class:MyEventReceiver
m_windowY	include/eventreceiver.h	/^	int	m_windowY;$/;"	m	class:MyEventReceiver
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
move	player.cpp	/^void CPlayer::move(core::vector3df vel)$/;"	f	class:CPlayer
printDebug	main.cpp	/^void printDebug(CDevice& device, CPlayer& player, int fps, bool debugCamera,$/;"	f
processInput	include/eventreceiver.h	/^	virtual bool processInput(vector3df& cameraPosition, vector3df& cameraRotation, bool& debugCamera)$/;"	f	class:MyEventReceiver
rotate	player.cpp	/^void CPlayer::rotate(core::vector3df rot)$/;"	f	class:CPlayer
setPosition	player.cpp	/^void CPlayer::setPosition(vector3df pos)$/;"	f	class:CPlayer
setRotation	player.cpp	/^void CPlayer::setRotation(vector3df rot)$/;"	f	class:CPlayer
setWindowDimension	include/eventreceiver.h	/^	virtual void setWindowDimension(int x, int y) { m_windowX = x; m_windowY = y; }$/;"	f	class:MyEventReceiver
setupIrrlicht	device.cpp	/^void CDevice::setupIrrlicht(MyEventReceiver& receiver)$/;"	f	class:CDevice
setupSkyBox	level.cpp	/^void CLevel::setupSkyBox(IVideoDriver* driver)$/;"	f	class:CLevel
testCollision	projectile.cpp	/^bool CProjectile::testCollision(ITriangleSelector* selector)$/;"	f	class:CProjectile
testCollision	weapon.cpp	/^bool CWeapon::testCollision(ITriangleSelector* selector)$/;"	f	class:CWeapon
tryShooting	weapon.cpp	/^bool CWeapon::tryShooting(vector3df direction)$/;"	f	class:CWeapon
update	player.cpp	/^void CPlayer::update(CDevice& device, const bool* keys, const bool fire, const float frametime)$/;"	f	class:CPlayer
update	projectile.cpp	/^void CProjectile::update(float elapsedTime)$/;"	f	class:CProjectile
updateCamera	main.cpp	/^void updateCamera(irr::scene::ICameraSceneNode *camera, $/;"	f
updateFrameTime	device.cpp	/^void CDevice::updateFrameTime()$/;"	f	class:CDevice
updateProjectiles	weapon.cpp	/^void CWeapon::updateProjectiles(float elapsedTime)$/;"	f	class:CWeapon
updateTitleBar	main.cpp	/^void updateTitleBar(int fps, int lastFPS, CDevice& device)$/;"	f
wasPressedLastFrame	include/eventreceiver.h	/^	bool wasPressedLastFrame;$/;"	m	class:MyEventReceiver
windowX	include/device.h	/^static const int windowX = 1280;$/;"	v
windowY	include/device.h	/^static const int windowY = 720;$/;"	v
~CLevel	level.cpp	/^CLevel::~CLevel()$/;"	f	class:CLevel
~CPlayer	player.cpp	/^CPlayer::~CPlayer()$/;"	f	class:CPlayer
~CProjectile	projectile.cpp	/^CProjectile::~CProjectile()$/;"	f	class:CProjectile
